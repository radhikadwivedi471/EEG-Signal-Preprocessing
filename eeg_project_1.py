# -*- coding: utf-8 -*-
"""eeg_project_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o74GYVxg0Gre023xc-G_jnaZOI-LMzmw
"""

!pip install mne

"""imports"""

import os
import numpy as np
import matplotlib.pyplot as plt
import mne
from mne.datasets import eegbci
from mne.io import read_raw_edf

SUBJECT = 1                 # Subject ID (1..109)
RUNS = [6, 10, 14]          # Common motor imagery runs (example: runs 6,10,14). Change as desired.
DATA_PATH = os.path.expanduser('~/mne_data')   # where MNE will store dataset
RESAMPLE_SF = 128           # Hz - None to keep original
NOTCH_FREQ = 50             # set 50 or 60 depending on your mains frequency (set None to skip)

"""data loading

"""

psd_welch = lambda raw, **kwargs: raw.compute_psd(**kwargs)
raw = eegbci.load_data(SUBJECT, RUNS, path=DATA_PATH, verbose=True)
print('Files:', raw)

"""file reading"""

file_path = '/root/mne_data/MNE-eegbci-data/files/eegmmidb/1.0.0/S001/S001R06.edf'
raw = mne.io.read_raw_edf(file_path, preload=True)

"""information"""

print(raw.info)

dir(raw)

"""filtering unwanted frequencies"""

raw.filter(l_freq= 1, h_freq= 40)
raw.notch_filter(freqs=50)

print(raw.info['ch_names'])

"""plot (channels vs time)"""

fig = raw.plot(n_channels=20, scalings='auto', title='EEG Signals', show=False)
fig.show()

"""power spectral density"""

psd = raw.compute_psd(fmin=0.5, fmax=30, tmax=42, picks='eeg', method='welch')
fig = psd.plot(average=True, dB=True, show=False)
plt.show()

position channels

#  Clean and standardize channel names
def clean_channel_name(name):
    # remove all dots and extra characters
    name = name.replace('.', '').replace('..', '')
    name = name.upper()
    return name

raw.rename_channels(clean_channel_name)

# convert names to proper capitalization
rename_dict = {ch: ch.capitalize() for ch in raw.ch_names}
raw.rename_channels(rename_dict)

#  Apply montage
montage = mne.channels.make_standard_montage('standard_1020')
raw.set_montage(montage, on_missing='ignore')

# Keep only valid channels
valid_chs = set(montage.ch_names)
chs_to_drop = [ch for ch in raw.ch_names if ch not in valid_chs]

if chs_to_drop:
    print(f" Dropping {len(chs_to_drop)} channels not in montage:\n{chs_to_drop}")
    # only drop if not all channels would be removed
    if len(chs_to_drop) < len(raw.ch_names):
        raw.drop_channels(chs_to_drop)
    else:
        print(" Not dropping anything because none match montage; will use auto coordinates instead.")
        raw.set_montage('standard_1020', on_missing='auto')

# Visual check
fig = raw.plot_sensors(show_names=True)
fig.show()

"""topomaps"""

# --- Define EEG frequency bands ---
bands = {
    'Delta': (0.5, 4),
    'Theta': (4, 8),
    'Alpha': (8, 13),
    'Beta': (13, 30)
}

# --- Filter data into each band ---
band_data = {}
for band, (l_freq, h_freq) in bands.items():
    print(f"Filtering {band} band: {l_freq}-{h_freq} Hz")
    band_data[band] = raw.copy().filter(l_freq=l_freq, h_freq=h_freq, verbose=False)

# --- Compute Power Spectral Density (PSD) and mean power per channel ---
band_power = {}
for band, data in band_data.items():
    psd, freqs = mne.time_frequency.psd_array_welch(
        data.get_data(), sfreq=data.info['sfreq'], fmin=bands[band][0], fmax=bands[band][1], n_fft=256, average='mean'
    )
    band_power[band] = psd.mean(axis=1)  # average power across time

#  Plot topomaps for each band
fig, axes = plt.subplots(1, len(bands), figsize=(18, 5))
for ax, band in zip(axes, bands.keys()):
    try:
        mne.viz.plot_topomap(band_power[band], pos=raw.info, axes=ax, show=False)
        ax.set_title(f"{band} Band", fontsize=13)
    except Exception as e:
        print(f"Skipping {band} due to error: {e}")
        ax.axis("off")

plt.suptitle("EEG Frequency Band Topomaps", fontsize=16)
plt.tight_layout()
plt.show()